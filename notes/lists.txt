Python has a data type called "list," which I'm pretty sure is gonna be a dynamic array.



Assignment to Variables:
  - assigning a variable to a list doesn't make a copy
  - it makes that variable point to the list in memory


Concatenation:
  - use + to smash 2 mf lists together
  - this creates a new list (editing the new list won't affect the original lists)



For loops:
  - Unlike JavaScript, you don't need to keep track of an index variable (i)
  - Unlike Ruby, you don't have each or blocks

  - use for/in. ex:
    squares = [1, 4, 9, 16]
    sum = 0
    for num in squares:
      sum += num
    print sum  ## 30

  - Python has no includes? method, so use for loops to check for inclusion:
    list = ['larry', 'curly', 'moe']
    if 'curly' in list:
      print 'yay'

  - for loops can also be used on strings (like str.each_char in Ruby)



Range:
  - use like this: range(n)
    - non inclusive (stops at n-1)
  - can also take in a start value: range(a, b)

  - can use a combo of the for loop and range to build a traditional numeric for loop:
    for i in range(100):
      print i

  - there is a variant xrange() that has better performance in Python 2 for the for loop/range combo because it doesn't build the whole list of numbers.
  - vanilla range() is performant in Python 3



While Loops:
  - pretty standard here
  - keywords "break" and "continue"
