Python has a data type called "list," which I'm pretty sure is gonna be a dynamic array.



Assignment to Variables:
  - assigning a variable to a list doesn't make a copy
  - it makes that variable point to the list in memory


Concatenation:
  - use + to smash 2 mf lists together
  - this creates a new list (editing the new list won't affect the original lists)



For loops:
  - Unlike JavaScript, you don't need to keep track of an index variable (i)
  - Unlike Ruby, you don't have each or blocks

  - use for/in. ex:
    squares = [1, 4, 9, 16]
    sum = 0
    for num in squares:
      sum += num
    print sum  ## 30

  - Python has no includes? method, so use for loops to check for inclusion:
    list = ['larry', 'curly', 'moe']
    if 'curly' in list:
      print 'yay'

  - for loops can also be used on strings (like str.each_char in Ruby)



Range:
  - use like this: range(n)
    - non inclusive (stops at n-1)
  - can also take in a start value: range(a, b)

  - can use a combo of the for loop and range to build a traditional numeric for loop:
    for i in range(100):
      print i

  - there is a variant xrange() that has better performance in Python 2 for the for loop/range combo because it doesn't build the whole list of numbers.
  - vanilla range() is performant in Python 3



While Loops:
  - pretty standard here
  - keywords "break" and "continue"




List Methods

Here are some other common list methods.

  - list.append(elem) -- adds a single element to the end of the list. Common error: does not return the new list, just modifies the original.

  - list.insert(index, elem) -- inserts the element at the given index, shifting elements to the right.

  - list.extend(list2) adds the elements in list2 to the end of the list. Using + or += on a list is similar to using extend().

  - list.index(elem) -- searches for the given element from the start of the list and returns its index. Throws a ValueError if the element does not appear (use "in" to check without a ValueError).

  - list.remove(elem) -- searches for the first instance of the given element and removes it (throws ValueError if not present)

  - list.sort() -- sorts the list in place (does not return it). (The sorted() function shown below is preferred.)

  - list.reverse() -- reverses the list in place (does not return it)

  - list.pop(index) -- removes and returns the element at the given index. Returns the rightmost element if index is omitted (roughly the opposite of append()).
  Notice that these are *methods* on a list object, while len() is a function that takes the list (or string or whatever) as an argument.



List Slices

Slices work on lists just as with strings, and can also be used to change sub-parts of the list.

         list = ['a', 'b', 'c', 'd']
         print list[1:-1]   ## ['b', 'c']
NOTE:    list[0:2] = 'z'    ## replace ['a', 'b'] with ['z']
         print list         ## ['z', 'c', 'd']
