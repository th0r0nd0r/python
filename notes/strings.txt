Mostly the same but here are some differences.



Class:
- the class is called str not String, so don't assign variables to str (it will overwrite the native str)



Escaping:
- the escape character is \ not /
- strings can span multiple lines, but there must be a \ to escape the newline
- triple quotes (""" or ''') don't need to escape newlines



Methods:
- it's len(string) not string.length
- don't use len as a variable name to avoid blocking out len() function
- it's str(var) not var.to_s

- in general, it seems that a lot of methods that would be .method in ruby, are method() in python

- The "print" operator prints out one or more python items followed by a newline (leave a trailing comma at the end of the items to inhibit the newline).
- A "raw" string literal is prefixed by an 'r' and passes all the chars through without special treatment of backslashes, so r'x\nx' evaluates to the length-4 string 'x\nx'.
- A 'u' prefix allows you to write a unicode string literal (Python has lots of other unicode support features -- see the docs below).



Operations:
- use // for integer division
- presumably / does float division in python 3+?
- dividing a float by an int and vice versa returns a float



String Methods Cont:
- s.lower(), s.upper() -- returns the lowercase or uppercase version of the string

- s.strip() -- returns a string with whitespace removed from the start and end

- s.isalpha()/s.isdigit()/s.isspace()... -- tests if all the string chars are in the various character classes

- s.startswith('other'), s.endswith('other') -- tests if the string starts or ends with the given other string

- s.find('other') -- searches for the given other string (not a regular expression) within s, and returns the first index where it begins or -1 if not found

NOTE: s.find returns -1 if the string is not found. this does NOT mean it's the last index in this case.

- s.replace('old', 'new') -- returns a string where all occurrences of 'old' have been replaced by 'new'

- s.split('delim') -- returns a list of substrings separated by the given delimiter. The delimiter is not a regular expression, it's just text. 'aaa,bbb,ccc'.split(',') -> ['aaa', 'bbb', 'ccc']. As a convenient special case s.split() (with no arguments) splits on all whitespace chars.

- s.join(list) -- opposite of split(), joins the elements in the given list together using the string as the delimiter. e.g. '---'.join(['aaa', 'bbb', 'ccc']) -> aaa---bbb---ccc




Slicing:
very similar to ruby, but uses : instead of ..
- always have to include the : in a slice

For example, if you're slicing "Hello"-
- s[-1] is 'o' -- last char (1st from the end)
- s[-4] is 'e' -- 4th from the end
- s[:-3] is 'He' -- going up to but not including the last 3 chars.
- s[-3:] is 'llo' -- starting with the 3rd char from the end and extending to the end of the string.




Using %:
From what I can tell it looks like you use % to interpolate values into a string like in this example:

text = "%d little pigs come out or I'll %s and %s and %s" % (3, 'huff', 'puff', 'blow down')




Unicode Strings:
different from 'str' objects, but they share the superclass "basestring"

to make one, put 'u' before the string, like so:
