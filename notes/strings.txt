Mostly the same but here are some differences.



Class:
- the class is called str not String, so don't assign variables to str (it will overwrite the native str)



Escaping:
- the escape character is \ not /
- strings can span multiple lines, but there must be a \ to escape the newline
- triple quotes (""" or ''') don't need to escape newlines



Methods:
- it's len(string) not string.length
- don't use len as a variable name to avoid blocking out len() function
- it's str(var) not var.to_s

- in general, it seems that a lot of methods that would be .method in ruby, are method() in python

- The "print" operator prints out one or more python items followed by a newline (leave a trailing comma at the end of the items to inhibit the newline). 
- A "raw" string literal is prefixed by an 'r' and passes all the chars through without special treatment of backslashes, so r'x\nx' evaluates to the length-4 string 'x\nx'.
- A 'u' prefix allows you to write a unicode string literal (Python has lots of other unicode support features -- see the docs below).



Operations:
- use // for integer division
- presumably / does float division in python 3+?
- dividing a float by an int and vice versa returns a float
